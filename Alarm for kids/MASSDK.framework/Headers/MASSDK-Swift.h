// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import StoreKit;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/**
  <h1>MASIAPManager</h1>
  In-App Purchase Manager.
*/
SWIFT_CLASS("_TtC6MASSDK13MASIAPManager")
@interface MASIAPManager : NSObject
/**
*/
- (void)getProductPrice;
- (void)buyProduct;
- (void)restorePurchase;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class SKProductsRequest;
@class SKProductsResponse;
@class SKRequest;

@interface MASIAPManager (SWIFT_EXTENSION(MASSDK)) <SKProductsRequestDelegate, SKRequestDelegate>
- (void)productsRequest:(SKProductsRequest * _Nonnull)request didReceiveResponse:(SKProductsResponse * _Nonnull)response;
- (void)request:(SKRequest * _Nonnull)request didFailWithError:(NSError * _Nonnull)error;
- (void)requestDidFinish:(SKRequest * _Nonnull)request;
@end

@class SKPaymentQueue;
@class SKPaymentTransaction;

@interface MASIAPManager (SWIFT_EXTENSION(MASSDK)) <SKPaymentTransactionObserver>
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue updatedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
- (void)paymentQueueRestoreCompletedTransactionsFinished:(SKPaymentQueue * _Nonnull)queue;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue restoreCompletedTransactionsFailedWithError:(NSError * _Nonnull)error;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue removedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
@end

@class NSCoder;

SWIFT_CLASS("_TtC6MASSDK11MASIdButton")
@interface MASIdButton : UIButton
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic) BOOL dark;
@property (nonatomic, setter=setSelected:) BOOL isSelected;
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
/**
  set <em>dark</em> = true for dark button with light text color
*/
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text dark:(BOOL)dark accId:(NSString * _Nonnull)accId;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text dark:(BOOL)dark;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class UIFont;
@class MASMenuItem;

/**
  MASManager
  Main MASSDK Manager.
  Start MASManager with setup() class method to initialize all data needed.
*/
SWIFT_CLASS("_TtC6MASSDK10MASManager")
@interface MASManager : NSObject
/**
  Shared Instance of MASManager
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MASManager * _Nonnull sharedInstance;)
+ (MASManager * _Nonnull)sharedInstance;
/**
  Background color in Side menu
*/
@property (nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
/**
  Background color for cell in Side menu
*/
@property (nonatomic, strong) UIColor * _Nonnull menuCellBackgroundColor;
/**
  Text color in cells in Side Menu
*/
@property (nonatomic, strong) UIColor * _Nonnull menuCellFontColor;
/**
  UIFont for text in cells in Side Menu
*/
@property (nonatomic, strong) UIFont * _Nonnull menuCellFont;
/**
  UIFont for section headers titles in Side Menu tableView
*/
@property (nonatomic, strong) UIFont * _Nonnull menuHeaderCellFont;
/**
  Title text color in section headers in Side Menu tableView
*/
@property (nonatomic, strong) UIColor * _Nonnull menuHeaderCellFontColor;
/**
  Status bar color in hamburger menu view
*/
@property (nonatomic, strong) UIColor * _Nullable statusBarColor;
/**
  Custom About View Navigation Bar flag. Set to true first, if you want your custom colors.
*/
@property (nonatomic) BOOL customAboutNavigation;
/**
  Navigation Bar Background Color
*/
@property (nonatomic, strong) UIColor * _Nonnull navigationBarColor;
/**
  Navigation Bar Tint Color. Will affect text color of done button.
*/
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
/**
  Navigation Bar Title Color. Will affect text color of Navigation Bar’s title
*/
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTitleColor;
/**
  Navigation Bar Title Font. Will affect UIFont of Navigation Bar’s title
*/
@property (nonatomic, strong) UIFont * _Nonnull navigationBarTitleFont;
/**
  This flag will affect if there will be visible publisher’s logo in About View.
  To show your custom logo, name Image Asset in your bundle MASLogo
*/
@property (nonatomic) BOOL isMasterTouch;
/**
  This flag will affect if there will be visible header image in Side Menu.
  This header will be visible only if no promotions are set. Promotion headers have
  higher priority than this flag and even this flag will be set tot true, the menu header
  will not be shown if there is promotion present.
  To show your custom header image, add Image Asset to your app’s bundle and name the
  asset MASHeader
*/
@property (nonatomic) BOOL showMenuHeader;
/**
  TODO
*/
@property (nonatomic, copy) NSString * _Nullable inAppIdentifier;
/**
  TODO
*/
@property (nonatomic, copy) NSString * _Nonnull inAppInfoText;
/**
  TODO
*/
@property (nonatomic) BOOL masterTouchFlow;
/**
  Set to TRUE to not show login/registration after inApp
*/
@property (nonatomic) BOOL hideRegistration;
/**
  Set this to true only if you need to hide promotions completely.
  This will cancel standard promotions behaviour, completely bypassing any promotions to be shown.
  This should only be used in exceptional cases.
*/
@property (nonatomic) BOOL hidePromotions;
/**
  Base Address, will be changed in setup
  Address is ending with “/”
*/
@property (nonatomic, copy) NSString * _Nonnull baseAddress;
/**
  TODO
*/
@property (nonatomic) BOOL logDebug;
/**
  Always make sure menu is not opened before trying to show ads
*/
@property (nonatomic, readonly) BOOL menuOpened;
/**
  TODO
  \param appHash TODO

  \param appId TODO

  \param trackingIdentifier TODO

  \param menuItems TODO

  \param releaseServer false default, true for release builds only

*/
+ (void)setup:(NSString * _Nonnull)appHash appId:(NSString * _Nonnull)appId trackingIdentifier:(NSString * _Nullable)trackingIdentifier menuItems:(NSArray<MASMenuItem *> * _Nonnull)menuItems releaseServer:(BOOL)releaseServer;
/**
  Clear all custom items and replaces them with new custom menu items.
  \param menuItems Array of new menu items to replace current menu items.

*/
- (void)updateMenuItems:(NSArray<MASMenuItem *> * _Nonnull)menuItems;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MASManager (SWIFT_EXTENSION(MASSDK))
@end


@interface MASManager (SWIFT_EXTENSION(MASSDK))
@end

@class SKStoreProductViewController;

@interface MASManager (SWIFT_EXTENSION(MASSDK)) <SKStoreProductViewControllerDelegate>
- (void)productViewControllerDidFinish:(SKStoreProductViewController * _Nonnull)viewController;
@end


@interface MASManager (SWIFT_EXTENSION(MASSDK))
@end


@interface MASManager (SWIFT_EXTENSION(MASSDK))
@end

@class NSError;
@class UIViewController;
enum MASUserState : NSInteger;

@interface MASManager (SWIFT_EXTENSION(MASSDK))
/**
  Register User on Authorization server.
  \param email User’s email address. Will be verified. If verification fails, InvalidEmail error is returned.

  \param login Users’s login. Must be provided. If not, InvalidLogin error is returned.

  \param password User’s password. Need to be 6+ characters long. If not, InavlidPassword error is returned.

  \param completion Completion block with Boolean success and optional error.

*/
- (void)registerUserAccountWithUserEmail:(NSString * _Nonnull)email withLogin:(NSString * _Nonnull)login withPassword:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)loginAndSaveTransactionWithUserLogin:(NSString * _Nonnull)login withPassword:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  TODO
  \param login TODO

  \param password TODO

  \param completion TODO

*/
- (void)loginUserAccountWithUserLogin:(NSString * _Nonnull)login withPassword:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)loginUserAccountWithHassedPassWithUserLogin:(NSString * _Nonnull)login withPassword:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Login user with saved details, this refreshes the TOKEN if neccessary. User has to login before normally.
*/
- (void)loginWithKeychain:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Opens MAS Login screen
*/
- (void)loginUserWithMasterTouchLoginView;
/**
  Opens Guide View Controller, to let user decide between login or registration
*/
- (void)showGuideWithMasterTouchView;
/**
  Opens MAS StoreViewController.
*/
- (void)showStoreView;
- (void)setFrontWithViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nullable)(void))completion;
/**
  Logs user out, cleans keychain, paid status is still saved
  \param completion return true when logout was successful

*/
- (void)logout:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Use this to find out user status. User status can be loggedIn, paid, paid and loggedIn or anonymous

  returns:
  User’s current state
*/
- (enum MASUserState)getUserState;
/**
  TODO
  \param oldPassword TODO

  \param newPassword TODO

  \param completion TODO

*/
- (void)changePassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  TODO
  \param login TODO

  \param completion TODO

*/
- (void)resetPassword:(NSString * _Nonnull)login completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/**
  Returns optional string Token for sending special requests
*/
- (NSString * _Nullable)getToken;
@end

@class UIImage;

SWIFT_CLASS("_TtC6MASSDK11MASMenuItem")
@interface MASMenuItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) UIImage * _Nonnull iconImage;
@property (nonatomic, readonly, strong) id _Nonnull target;
@property (nonatomic, readonly) SEL _Nonnull selector;
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityId;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name iconImage:(UIImage * _Nonnull)iconImage target:(id _Nonnull)target selector:(NSString * _Nonnull)selector accessibilityId:(NSString * _Nullable)accessibilityId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name iconImage:(UIImage * _Nonnull)iconImage target:(id _Nonnull)target selector:(NSString * _Nonnull)selector OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6MASSDK23MASNavigationController")
@interface MASNavigationController : UINavigationController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;

/**
  MASStoreViewController
*/
SWIFT_CLASS("_TtC6MASSDK22MASStoreViewController")
@interface MASStoreViewController : UIViewController
/**
  TODO - customize UI
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull buyButton;
/**
  TODO - customize UI
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull alreadyPurchasedButton;
/**
  TODO - add text, font, color
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull infoLabel;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MASStoreViewController (SWIFT_EXTENSION(MASSDK))
@end


@interface MASStoreViewController (SWIFT_EXTENSION(MASSDK))
@end


@interface MASStoreViewController (SWIFT_EXTENSION(MASSDK))
- (void)didLoadPriceForProduct:(NSString * _Nonnull)localePriceString;
- (void)didFailToLoadProductPriceWithError:(NSError * _Nonnull)error;
- (void)transactionSucceeded;
- (void)transactionFailed;
- (void)nothingToRestore;
@end

/**
  Current app’s user state
  <ul>
    <li>
      Anonymous:       User is not logged in or has paid for in-app
    </li>
    <li>
      LoggedIn:        User is logged in, user authorization is present
    </li>
    <li>
      Paid:            ser has paid for in-app
    </li>
    <li>
      PaidAndLoggedIn: User is both logged in and has paid for in-app
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, MASUserState) {
  MASUserStateAnonymous = 0,
  MASUserStateLoggedIn = 1,
  MASUserStatePaid = 2,
  MASUserStatePaidAndLoggedIn = 3,
};

@protocol UIViewControllerTransitionCoordinator;
@class UIStoryboardSegue;

SWIFT_CLASS("_TtC6MASSDK30UISideMenuNavigationController")
@interface UISideMenuNavigationController : UINavigationController
- (void)awakeFromNib;
@property (nonatomic) BOOL leftSide;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (BOOL)shouldPerformSegueWithIdentifier:(NSString * _Nonnull)identifier sender:(id _Nullable)sender;
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
